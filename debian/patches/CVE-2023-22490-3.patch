Backport CVE-2023-22490 fix to pre dir-iterator git.

Author: Emilio Pozuelo Monfort <pochu@debian.org>

---

From bffc762f87ae8d18c6001bf0044a76004245754c Mon Sep 17 00:00:00 2001
From: Taylor Blau <me@ttaylorr.com>
Date: Tue, 24 Jan 2023 19:43:51 -0500
Subject: [PATCH] dir-iterator: prevent top-level symlinks without
 FOLLOW_SYMLINKS

When using the dir_iterator API, we first stat(2) the base path, and
then use that as a starting point to enumerate the directory's contents.

If the directory contains symbolic links, we will immediately die() upon
encountering them without the `FOLLOW_SYMLINKS` flag. The same is not
true when resolving the top-level directory, though.

As explained in a previous commit, this oversight in 6f054f9fb3
(builtin/clone.c: disallow `--local` clones with symlinks, 2022-07-28)
can be used as an attack vector to include arbitrary files on a victim's
filesystem from outside of the repository.

Prevent resolving top-level symlinks unless the FOLLOW_SYMLINKS flag is
given, which will cause clones of a repository with a symlink'd
"$GIT_DIR/objects" directory to fail.

Signed-off-by: Taylor Blau <me@ttaylorr.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
---
 dir-iterator.c             | 13 +++++++++----
 dir-iterator.h             |  5 +++++
 t/t0066-dir-iterator.sh    | 27 ++++++++++++++++++++++++++-
 t/t5604-clone-reference.sh | 16 ++++++++++++++++
 4 files changed, 56 insertions(+), 5 deletions(-)

--- a/builtin/clone.c
+++ b/builtin/clone.c
@@ -312,6 +312,13 @@ static void copy_or_link_directory(struc
 	int src_len, dest_len;
 	DIR *dir;
 
+	if (lstat(src->buf, &buf))
+		die(_("failed to stat %s\n"), src->buf);
+
+	if (S_ISLNK(buf.st_mode))
+		die(_("symlink '%s' exists, refusing to clone with --local"),
+		    src->buf);
+
 	dir = opendir(src->buf);
 	if (!dir)
 		die_errno(_("failed to open '%s'"), src->buf);
--- a/t/t5700-clone-reference.sh
+++ b/t/t5700-clone-reference.sh
@@ -260,4 +260,21 @@ test_expect_success SYMLINKS 'clone repo
 	test_cmp expected-files T--shared.objects-files.raw &&
 	test_must_be_empty T--shared.objects-symlinks.raw
 '
+
+test_expect_success SYMLINKS 'clone repo with symlinked objects directory' '
+	test_when_finished "rm -fr sensitive malicious" &&
+
+	mkdir -p sensitive &&
+	echo "secret" >sensitive/file &&
+
+	git init malicious &&
+	rm -fr malicious/.git/objects &&
+	ln -s "$(pwd)/sensitive" ./malicious/.git/objects &&
+
+	test_must_fail git clone --local malicious clone 2>err &&
+
+	test_path_is_missing clone &&
+	grep "refusing to clone" err
+'
+
 test_done
